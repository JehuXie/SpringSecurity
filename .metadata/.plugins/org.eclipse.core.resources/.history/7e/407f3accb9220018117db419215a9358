package com.jehu.security.browser;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.jehu.security.core.properties.SecurityProperties;
import com.jehu.security.core.validate.code.ValidateCodeFilter;
@Configuration
public class BrowserSecurityConfig extends WebSecurityConfigurerAdapter{

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	};
	
	@Autowired
	private SecurityProperties securityProperties;
	
	@Autowired
	private AuthenticationSuccessHandler jehuAuthenticationSuccessHandler;
	
	@Autowired
	private AuthenticationFailureHandler jehuAuthenticationFailureHandler;
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
		ValidateCodeFilter validateCodeFilter = new ValidateCodeFilter();
		//validateCodeFilter.setAuthenticationFailureHandler(jehuAuthenticationFailureHandler);
		validateCodeFilter.setSecurityProperties(securityProperties);
		validateCodeFilter.afterPropertiesSet();
		http
		.addFilterBefore(validateCodeFilter, UsernamePasswordAuthenticationFilter.class)
		.formLogin()
		.loginPage("/authentication/require")
		.loginProcessingUrl("/authentication/form")//提交后由UsernamePasswordAuthenticationFilter处理
		.successHandler(jehuAuthenticationSuccessHandler)
		.failureHandler(jehuAuthenticationFailureHandler)
		.and()
		.authorizeRequests()
		.antMatchers("/authentication/require",securityProperties.getBrowser().getLoginPage()
				,"/code/image").permitAll()
		.anyRequest()
		.authenticated()
		.and()
		.csrf().disable();
	}

}
